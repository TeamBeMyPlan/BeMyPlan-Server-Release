apply plugin: "com.ewerk.gradle.plugins.querydsl"

dependencies {
    implementation project(':module-admin-bemyplan')

    api 'org.springframework.boot:spring-boot-starter-validation'
    api 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.session:spring-session-data-redis'
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
    implementation 'mysql:mysql-connector-java'
    implementation 'org.jetbrains:annotations:20.1.0'
    api group: 'io.springfox', name: 'springfox-boot-starter', version: '3.0.0'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'
    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'

    annotationProcessor "org.mapstruct:mapstruct-processor:1.4.2.Final"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    api 'org.springframework.boot:spring-boot-starter-data-jpa'
    api 'com.querydsl:querydsl-jpa'
    api 'com.querydsl:querydsl-apt'
}

/**
 * querydsl 설정 시작
 */
def querydslSrcDir = "$buildDir/generated/querydsl"

querydsl {
    library = "com.querydsl:querydsl-apt"
    jpa = true
    querydslSourcesDir = querydslSrcDir
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', querydslSrcDir]
        }
    }
}

compileQuerydsl{
    options.annotationProcessorPath = configurations.querydsl
}

configurations {
    querydsl.extendsFrom compileClasspath
}

compileQuerydsl.doFirst {
    if(file(querydslSrcDir).exists())
        delete(file(querydslSrcDir))
}
/**
 * querydsl 설정 끝
 */